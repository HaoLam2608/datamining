import streamlit as st
import pandas as pd
import altair as alt
import chardet
from io import StringIO
from utils.modeling import train_polynomial_model
from utils.data_processing import clean_data

# H√†m ƒë·ªçc file CSV t·ª± ƒë·ªông nh·∫≠n di·ªán encoding
def read_uploaded_csv(uploaded_file):
    raw_data = uploaded_file.read()
    result = chardet.detect(raw_data)
    encoding = result['encoding'] or 'utf-8'
    
    try:
        decoded_data = raw_data.decode(encoding)
        return pd.read_csv(StringIO(decoded_data))
    except Exception as e:
        raise ValueError(f"L·ªói khi gi·∫£i m√£ file CSV b·∫±ng encoding '{encoding}': {e}")

def render_competitor_tab(df_prod, combo_label):
    st.header("ü§ù Ph√¢n t√≠ch c·∫°nh tranh")
    st.write(f"S·∫£n ph·∫©m/Combo: **{combo_label}**")
    
    df_clean = clean_data(df_prod)
    model, poly_features, _ = train_polynomial_model(df_clean)
    base_price = df_clean['PRICE'].mean()
    
    # T·∫£i file ƒë·ªëi th·ªß
    st.subheader("T·∫£i l√™n file CSV ch·ª©a th√¥ng tin ƒë·ªëi th·ªß")
    uploaded_file = st.file_uploader("üìÑ Ch·ªçn file CSV c√≥ c·ªôt NAME, PRICE, QUANTITY, REVENUE", type=["csv"])
    
    if uploaded_file is None:
        st.info("üì• Vui l√≤ng t·∫£i l√™n file CSV c√≥ 4 c·ªôt: NAME, PRICE, QUANTITY, REVENUE.")
        return
    
    try:
        df_competitor = read_uploaded_csv(uploaded_file)
        required_cols = {'NAME', 'PRICE', 'QUANTITY', 'REVENUE'}
        if not required_cols.issubset(df_competitor.columns):
            st.error(f"‚ùå File CSV ph·∫£i c√≥ b·ªën c·ªôt: {', '.join(required_cols)}.")
            return
        
        # L·∫•y d·ªØ li·ªáu ƒë·ªëi th·ªß
        competitor_names = df_competitor['NAME'].astype(str).tolist()
        competitor_prices = df_competitor['PRICE'].astype(float).tolist()
        competitor_quantities = df_competitor['QUANTITY'].astype(float).tolist()
        competitor_revenues = df_competitor['REVENUE'].astype(float).tolist()
        
        data = []
        total_q = 0
        
        # D√πng d·ªØ li·ªáu ƒë·ªëi th·ªß c√≥ s·∫µn, kh√¥ng d·ª± ƒëo√°n n·ªØa
        for name, price, q, r in zip(competitor_names, competitor_prices, competitor_quantities, competitor_revenues):
            total_q += q
            data.append((name, price, q, r))
        
        # Th√™m d·ªØ li·ªáu shop c·ªßa b·∫°n (d·ª± ƒëo√°n d·ª±a tr√™n model)
        own_shop_name = "Your Shop"
        own_q = df_clean['QUANTITY'].mean()
        own_r = base_price * own_q
        total_q += own_q
        data.append((own_shop_name, base_price, own_q, own_r))
        
        df_comp = pd.DataFrame(data, columns=['Competitor', 'Price', 'Quantity', 'Revenue'])
        df_comp['Market Share (%)'] = (df_comp['Quantity'] / total_q * 100).round(2)
        
        st.subheader("Ph√¢n t√≠ch c·∫°nh tranh d·ª±a tr√™n d·ªØ li·ªáu th·ª±c t·∫ø")
        st.dataframe(df_comp)
        
        chart1 = alt.Chart(df_comp).mark_arc().encode(
            theta=alt.Theta(field="Market Share (%)", type="quantitative"),
            color=alt.Color(field="Competitor", type="nominal"),
            tooltip=['Competitor', 'Price', 'Quantity', 'Market Share (%)']
        ).properties(title="Th·ªã ph·∫ßn d·ª±a tr√™n s·ªë l∆∞·ª£ng", width=300, height=300)

        chart2 = alt.Chart(df_comp).mark_bar().encode(
            x=alt.X('Competitor:N'),
            y=alt.Y('Price:Q'),
            color=alt.Color('Competitor:N', legend=None),
            tooltip=['Competitor', 'Price']
        ).properties(title="So s√°nh gi√°", width=300, height=300)

        st.altair_chart(alt.hconcat(chart1, chart2), use_container_width=True)

        # Ph√¢n t√≠ch v·ªã th·∫ø
        own_position = df_comp[df_comp['Competitor'] == own_shop_name].iloc[0]
        competitors_df = df_comp[df_comp['Competitor'] != own_shop_name]
        avg_competitor_price = competitors_df['Price'].mean()
        price_difference = ((base_price - avg_competitor_price) / avg_competitor_price) * 100
        
        st.subheader("Ph√¢n t√≠ch v·ªã th·∫ø c·∫°nh tranh")
        if price_difference > 5:
            st.warning(f"‚ö†Ô∏è Gi√° c·ªßa b·∫°n cao h∆°n {abs(price_difference):.2f}% so v·ªõi gi√° trung b√¨nh c·ªßa ƒë·ªëi th·ªß.")
        elif price_difference < -5:
            st.success(f"‚úÖ Gi√° c·ªßa b·∫°n th·∫•p h∆°n {abs(price_difference):.2f}% so v·ªõi gi√° trung b√¨nh c·ªßa ƒë·ªëi th·ªß.")
        else:
            st.info(f"‚ÑπÔ∏è Gi√° c·ªßa b·∫°n t∆∞∆°ng ƒë∆∞∆°ng v·ªõi gi√° trung b√¨nh c·ªßa ƒë·ªëi th·ªß (ch√™nh l·ªách {price_difference:.2f}%).")

        st.subheader("ƒê·ªÅ xu·∫•t chi·∫øn l∆∞·ª£c c·∫°nh tranh")
        if own_position['Market Share (%)'] < 20:
            if price_difference > 5:
                st.error("‚ùó Th·ªã ph·∫ßn th·∫•p v√† gi√° cao h∆°n ƒë·ªëi th·ªß. N√™n xem x√©t gi·∫£m gi√° ƒë·ªÉ tƒÉng c·∫°nh tranh.")
            else:
                st.warning("‚ö†Ô∏è Th·ªã ph·∫ßn th·∫•p. N√™n xem x√©t c√°c y·∫øu t·ªë kh√°c ngo√†i gi√° nh∆∞ ch·∫•t l∆∞·ª£ng, d·ªãch v·ª•.")
        else:
            if price_difference < -5:
                st.success("‚úÖ Th·ªã ph·∫ßn t·ªët v√† gi√° th·∫•p h∆°n ƒë·ªëi th·ªß. C√≥ th·ªÉ xem x√©t tƒÉng gi√° ƒë·ªÉ t·ªëi ∆∞u doanh thu.")
            else:
                st.success("üëç V·ªã th·∫ø c·∫°nh tranh t·ªët. N√™n duy tr√¨ chi·∫øn l∆∞·ª£c hi·ªán t·∫°i.")
    
    except Exception as e:
        st.error(f"‚ùå L·ªói khi ƒë·ªçc file ho·∫∑c x·ª≠ l√Ω d·ªØ li·ªáu: {e}")
