import streamlit as st
import numpy as np
import pandas as pd
from utils.modeling import train_polynomial_model, predict_revenue, train_random_forest_model,prepare_features
from utils.visualization import create_price_revenue_chart
from sklearn.metrics import r2_score
import altair as alt

def render_optimal_price_tab(df_prod, combo_label):
    st.header("üìà T√¨m Gi√° B√°n T·ªëi ∆Øu")

    # Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
    if df_prod.empty or not all(col in df_prod.columns for col in ['PRICE', 'QUANTITY', 'CALENDAR_DATE']):
        st.error("‚ùó D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i.")
        return

    # √âp ki·ªÉu ng√†y n·∫øu ch∆∞a ƒë√∫ng
    try:
        df_prod['CALENDAR_DATE'] = pd.to_datetime(df_prod['CALENDAR_DATE'], errors='coerce')
    except Exception as e:
        st.error(f"L·ªói khi √©p ki·ªÉu ng√†y: {e}")
        return

    # B·ªè c√°c d√≤ng thi·∫øu d·ªØ li·ªáu
    df_prod = df_prod.dropna(subset=['PRICE', 'QUANTITY', 'CALENDAR_DATE'])

    # N·∫øu sau khi l√†m s·∫°ch d·ªØ li·ªáu c√≤n qu√° √≠t
    if len(df_prod) < 10:
        st.warning("‚ö†Ô∏è Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ ph√¢n t√≠ch cho s·∫£n ph·∫©m n√†y.")
        return

    # Train Random Forest tr√™n d·ªØ li·ªáu kh√¥ng g·ªôp
    model = train_random_forest_model(df_prod)

    # T√≠nh R¬≤
    X, y = prepare_features(df_prod)
    y_pred = model.predict(X)
    r2 = r2_score(y, y_pred)
    st.metric("üéØ R¬≤ c·ªßa m√¥ h√¨nh", f"{r2:.2f}")

    # D·ª± ƒëo√°n doanh thu tr√™n d·∫£i gi√°
    price_range = np.linspace(df_prod['PRICE'].min(), df_prod['PRICE'].max(), 100)
    avg_dayofweek = int(df_prod['CALENDAR_DATE'].dt.dayofweek.mode()[0])  

    revenue_pred = []
    for p in price_range:
        try:
            qty_pred = model.predict([[p, avg_dayofweek]])[0]
        except Exception as e:
            st.error(f"L·ªói khi d·ª± ƒëo√°n v·ªõi gi√° {p:.2f}: {e}")
            qty_pred = 0
        qty_pred = max(0, qty_pred)
        revenue_pred.append(p * qty_pred)

    # N·∫øu doanh thu to√†n 0 th√¨ c·∫£nh b√°o
    if all(r == 0 for r in revenue_pred):
        st.warning("‚ö†Ô∏è M√¥ h√¨nh d·ª± ƒëo√°n doanh thu b·∫±ng 0 cho t·∫•t c·∫£ c√°c m·ª©c gi√°. Vui l√≤ng ki·ªÉm tra l·∫°i d·ªØ li·ªáu.")
        return

    # T√¨m gi√° t·ªëi ∆∞u
    opt_idx = np.argmax(revenue_pred)
    opt_price = price_range[opt_idx]
    opt_revenue = revenue_pred[opt_idx]

    # Hi·ªÉn th·ªã k·∫øt qu·∫£ t·ª´ d·ªØ li·ªáu th·ª±c t·∫ø
    df_prod['Revenue'] = df_prod['PRICE'] * df_prod['QUANTITY']
    max_revenue_row = df_prod.loc[df_prod['Revenue'].idxmax()]

    col1, col2 = st.columns(2)
    with col1:
        st.metric("üíµ Gi√° t·ªëi ∆∞u t·ª´ d·ªØ li·ªáu th·ª±c t·∫ø", f"{max_revenue_row['PRICE']:.2f}")
        st.metric("üí∞ Doanh thu max t·ª´ d·ªØ li·ªáu", f"{max_revenue_row['Revenue']:,.2f}")
    with col2:
        st.metric("üìä Gi√° t·ªëi ∆∞u t·ª´ m√¥ h√¨nh", f"{opt_price:.2f}")
        st.metric("üìà Doanh thu d·ª± ƒëo√°n", f"{opt_revenue:,.2f}")

    # T·∫°o DataFrame cho bi·ªÉu ƒë·ªì
    pred_df = pd.DataFrame({'Gi√°': price_range, 'Doanh thu d·ª± ƒëo√°n': revenue_pred})

    # N·∫øu bi·ªÉu ƒë·ªì kh√¥ng hi·ªÉn th·ªã do l·ªói chart
    try:
        chart = create_price_revenue_chart(df_prod, pred_df)
        st.altair_chart(chart, use_container_width=True)
    except Exception as e:
        st.error(f"L·ªói khi v·∫Ω bi·ªÉu ƒë·ªì doanh thu: {e}")
        st.write(pred_df)

    # Th√¥ng tin tƒÉng doanh thu
    current_price = df_prod['PRICE'].mean()
    current_qty = df_prod['QUANTITY'].mean()
    current_revenue = current_price * current_qty
    revenue_increase = (opt_revenue - current_revenue) / current_revenue * 100 if current_revenue > 0 else 0
    st.info(f"N·∫øu thay ƒë·ªïi gi√° t·ª´ {current_price:.2f} th√†nh {opt_price:.2f}, doanh thu d·ª± ki·∫øn s·∫Ω tƒÉng {revenue_increase:.2f}%")

    # Bi·ªÉu ƒë·ªì so s√°nh
    df_compare = pd.DataFrame({
        'Lo·∫°i': ['Hi·ªán t·∫°i', 'T·ªëi ∆∞u (d·ª± ƒëo√°n)'],
        'Doanh thu': [current_revenue, opt_revenue]
    })
    chart_compare = alt.Chart(df_compare).mark_bar().encode(
        x='Lo·∫°i',
        y='Doanh thu',
        color='Lo·∫°i'
    ).properties(title="So s√°nh doanh thu hi·ªán t·∫°i vs t·ªëi ∆∞u")
    st.altair_chart(chart_compare, use_container_width=True)

    # T·∫£i d·ªØ li·ªáu d·ª± ƒëo√°n
    csv = pred_df.to_csv(index=False).encode('utf-8')
    st.download_button("üì• T·∫£i v·ªÅ d·ªØ li·ªáu d·ª± ƒëo√°n", data=csv, file_name="du_doan_doanh_thu.csv", mime='text/csv')

