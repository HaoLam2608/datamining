import streamlit as st
import pandas as pd
import altair as alt
from utils.modeling import train_polynomial_model, predict_revenue
from utils.data_processing import clean_data

def render_competitor_tab(df_prod, combo_label):
    """Hi·ªÉn th·ªã n·ªôi dung tab ƒê·ªëi th·ªß"""
    st.header("ü§ù Ph√¢n t√≠ch c·∫°nh tranh")
    st.write(f"S·∫£n ph·∫©m/Combo: **{combo_label}**")
    
    df_clean = clean_data(df_prod)
    model, poly_features, _ = train_polynomial_model(df_clean)
    base_price = df_clean['PRICE'].mean()
    
    # Nh·∫≠p th√¥ng tin ƒë·ªëi th·ªß
    st.subheader("Th√¥ng tin ƒë·ªëi th·ªß")
    col1, col2 = st.columns(2)
    with col1:
        competitor_names = st.text_area(
            "T√™n ƒë·ªëi th·ªß (m·ªói d√≤ng m·ªôt t√™n)",
            "ƒê·ªëi th·ªß A\nƒê·ªëi th·ªß B\nƒê·ªëi th·ªß C",
            help="Nh·∫≠p t√™n c√°c ƒë·ªëi th·ªß, m·ªói ƒë·ªëi th·ªß m·ªôt d√≤ng"
        ).strip().split("\n")
    
    with col2:
        competitor_prices = st.text_area(
            "Gi√° c·ªßa ƒë·ªëi th·ªß (m·ªói d√≤ng m·ªôt gi√°)",
            f"{base_price*0.95:.2f}\n{base_price*1.05:.2f}\n{base_price*1.15:.2f}",
            help="Nh·∫≠p gi√° c·ªßa t·ª´ng ƒë·ªëi th·ªß, m·ªói gi√° m·ªôt d√≤ng"
        ).strip().split("\n")
    
    # Ki·ªÉm tra ƒë·∫ßu v√†o
    if len(competitor_names) != len(competitor_prices):
        st.error("S·ªë l∆∞·ª£ng t√™n ƒë·ªëi th·ªß v√† gi√° kh√¥ng kh·ªõp nhau!")
        return
    
    try:
        competitor_prices = [float(price) for price in competitor_prices]
        competitors = dict(zip(competitor_names, competitor_prices))
        
        # Ph√¢n t√≠ch th·ªã ph·∫ßn
        data = []
        total_q = 0
        for name, price in competitors.items():
            revenue = predict_revenue(model, poly_features, price)
            q = revenue / price if price > 0 else 0
            total_q += q
            data.append((name, price, q, revenue))
        
        # Th√™m d·ªØ li·ªáu shop c·ªßa m√¨nh
        own_shop_name = "Shop c·ªßa b·∫°n"
        own_q = df_clean['QUANTITY'].mean()
        own_r = base_price * own_q
        total_q += own_q
        data.append((own_shop_name, base_price, own_q, own_r))
        
        df_comp = pd.DataFrame(data, columns=['ƒê·ªëi th·ªß', 'Gi√°', 'SL d·ª± ƒëo√°n', 'Doanh thu'])
        df_comp['Th·ªã ph·∫ßn (%)'] = (df_comp['SL d·ª± ƒëo√°n'] / total_q * 100).round(2)
        
        st.subheader("Ph√¢n t√≠ch c·∫°nh tranh d·ª±a tr√™n gi√°")
        st.dataframe(df_comp)
        
        # V·∫Ω bi·ªÉu ƒë·ªì
        chart1 = alt.Chart(df_comp).mark_arc().encode(
            theta=alt.Theta(field="Th·ªã ph·∫ßn (%)", type="quantitative"),
            color=alt.Color(field="ƒê·ªëi th·ªß", type="nominal", legend=alt.Legend(title="ƒê·ªëi th·ªß")),
            tooltip=['ƒê·ªëi th·ªß', 'Gi√°', 'SL d·ª± ƒëo√°n', 'Th·ªã ph·∫ßn (%)']
        ).properties(title="Th·ªã ph·∫ßn d·ª± ƒëo√°n", width=300, height=300)
        
        chart2 = alt.Chart(df_comp).mark_bar().encode(
            x=alt.X('ƒê·ªëi th·ªß:N', title='ƒê·ªëi th·ªß'),
            y=alt.Y('Gi√°:Q', title='Gi√°'),
            color=alt.Color('ƒê·ªëi th·ªß:N', legend=None),
            tooltip=['ƒê·ªëi th·ªß', 'Gi√°']
        ).properties(title="So s√°nh gi√° gi·ªØa c√°c ƒë·ªëi th·ªß", width=300, height=300)
        
        st.altair_chart(alt.hconcat(chart1, chart2), use_container_width=True)
        
        # Ph√¢n t√≠ch v·ªã th·∫ø c·∫°nh tranh
        own_position = df_comp[df_comp['ƒê·ªëi th·ªß'] == own_shop_name].iloc[0]
        competitors_df = df_comp[df_comp['ƒê·ªëi th·ªß'] != own_shop_name]
        avg_competitor_price = competitors_df['Gi√°'].mean()
        price_difference = ((base_price - avg_competitor_price) / avg_competitor_price) * 100
        
        st.subheader("Ph√¢n t√≠ch v·ªã th·∫ø c·∫°nh tranh")
        if price_difference > 5:
            st.warning(f"‚ö†Ô∏è Gi√° c·ªßa b·∫°n cao h∆°n {abs(price_difference):.2f}% so v·ªõi gi√° trung b√¨nh c·ªßa ƒë·ªëi th·ªß.")
        elif price_difference < -5:
            st.success(f"‚úÖ Gi√° c·ªßa b·∫°n th·∫•p h∆°n {abs(price_difference):.2f}% so v·ªõi gi√° trung b√¨nh c·ªßa ƒë·ªëi th·ªß.")
        else:
            st.info(f"‚ÑπÔ∏è Gi√° c·ªßa b·∫°n t∆∞∆°ng ƒë∆∞∆°ng v·ªõi gi√° trung b√¨nh c·ªßa ƒë·ªëi th·ªß (ch√™nh l·ªách {price_difference:.2f}%).")
        
        # ƒê·ªÅ xu·∫•t chi·∫øn l∆∞·ª£c
        st.subheader("ƒê·ªÅ xu·∫•t chi·∫øn l∆∞·ª£c c·∫°nh tranh")
        if own_position['Th·ªã ph·∫ßn (%)'] < 20:
            if price_difference > 5:
                st.error("‚ùó Th·ªã ph·∫ßn th·∫•p v√† gi√° cao h∆°n ƒë·ªëi th·ªß. N√™n xem x√©t gi·∫£m gi√° ƒë·ªÉ tƒÉng kh·∫£ nƒÉng c·∫°nh tranh.")
            else:
                st.warning("‚ö†Ô∏è Th·ªã ph·∫ßn th·∫•p. N√™n xem x√©t c√°c y·∫øu t·ªë kh√°c ngo√†i gi√° nh∆∞ ch·∫•t l∆∞·ª£ng, d·ªãch v·ª•.")
        else:
            if price_difference < -5:
                st.success("‚úÖ Th·ªã ph·∫ßn t·ªët v√† gi√° th·∫•p h∆°n ƒë·ªëi th·ªß. C√≥ th·ªÉ xem x√©t tƒÉng gi√° ƒë·ªÉ t·ªëi ∆∞u doanh thu.")
            else:
                st.success("üëç V·ªã th·∫ø c·∫°nh tranh t·ªët. N√™n duy tr√¨ chi·∫øn l∆∞·ª£c hi·ªán t·∫°i v√† theo d√µi ƒë·ªëi th·ªß.")
                
    except ValueError as e:
        st.error(f"L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu ƒë·ªëi th·ªß: {e}")