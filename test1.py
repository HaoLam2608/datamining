# app_v6_competitor_analysis.py

import streamlit as st
import pandas as pd
import numpy as np
import altair as alt
from sklearn.linear_model import LinearRegression
from itertools import combinations

st.set_page_config(page_title="T·ªëi ∆Øu Gi√° B√°n Cafe & Ph√¢n ƒê·ªëi Th·ªß", layout="wide")
st.title("‚òï ·ª®ng d·ª•ng T·ªëi ∆Øu & Ph√¢n T√≠ch Gi√° B√°n Cafe Shop (C·∫°nh Tranh)")

# Sidebar: upload d·ªØ li·ªáu
st.sidebar.header("üöÄ Upload d·ªØ li·ªáu")
u_meta  = st.sidebar.file_uploader("Sell Meta Data (CSV)", type="csv")
u_trans = st.sidebar.file_uploader("Transaction Store (CSV)", type="csv")
u_date  = st.sidebar.file_uploader("Date Info (CSV)", type="csv")

if not (u_meta and u_trans and u_date):
    st.sidebar.info("Vui l√≤ng upload c·∫£ 3 file ƒë·ªÉ b·∫Øt ƒë·∫ßu!")
    st.stop()

# Gi·∫£ s·ª≠ b·∫°n ƒë√£ t·∫£i c√°c file t·ª´ sidebar
sell_meta = pd.read_csv(u_meta)
transaction = pd.read_csv(u_trans)
date_info = pd.read_csv(u_date)

# Chu·∫©n h√≥a t√™n c·ªôt
sell_meta.columns = sell_meta.columns.str.strip()
transaction.columns = transaction.columns.str.strip()
date_info.columns = date_info.columns.str.strip()

# Convert CALENDAR_DATE sang ƒë·ªãnh d·∫°ng datetime (n·∫øu ch∆∞a)
transaction['CALENDAR_DATE'] = pd.to_datetime(transaction['CALENDAR_DATE'], errors='coerce')
date_info['CALENDAR_DATE'] = pd.to_datetime(date_info['CALENDAR_DATE'], errors='coerce')

# Merge d·ªØ li·ªáu transaction v√† sell_meta
merged = pd.merge(transaction, sell_meta, on=["SELL_ID", "SELL_CATEGORY"], how="left")

# Merge d·ªØ li·ªáu merged v·ªõi date_info d·ª±a tr√™n CALENDAR_DATE
merged = pd.merge(merged, date_info, on="CALENDAR_DATE", how="left")

# Ki·ªÉm tra k·∫øt qu·∫£ merge
st.write("K·∫øt qu·∫£ sau khi merge:")
st.dataframe(merged)

# Ti·∫øp t·ª•c ph·∫ßn ch·ªçn s·∫£n ph·∫©m...
items = merged['ITEM_NAME'].dropna().unique().tolist()

# Sidebar: ch·ªçn 1 ho·∫∑c 2 s·∫£n ph·∫©m
items = merged['ITEM_NAME'].dropna().unique().tolist()
selected_items = st.sidebar.multiselect("üõí Ch·ªçn 1 ho·∫∑c 2 s·∫£n ph·∫©m:", items, max_selections=2)
if not selected_items:
    st.sidebar.info("Ch·ªçn √≠t nh·∫•t 1 s·∫£n ph·∫©m.")
    st.stop()

# L·ªçc d·ªØ li·ªáu theo l·ª±a ch·ªçn
if len(selected_items) == 1:
    df_prod = merged[merged['ITEM_NAME'] == selected_items[0]].copy()
    combo_label = selected_items[0]
else:
    df_prod = merged[merged['ITEM_NAME'].isin(selected_items)].copy()
    combo_label = ' + '.join(selected_items)
    df_prod['ITEM_NAME'] = combo_label

if df_prod.empty:
    st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu cho l·ª±a ch·ªçn n√†y.")
    st.stop()

# Tab UI
tabs = st.tabs([
        "üìã D·ªØ li·ªáu", "üìà Gi√° t·ªëi ∆∞u", "üîç Ph√¢n t√≠ch gi√°", "üí∞ Thay ƒë·ªïi gi√°",
        "üè¢ ƒê·ªëi th·ªß", "üìä So s√°nh gi√° & SL", "üõí ∆Ø·ªõc l∆∞·ª£ng doanh thu", "üìâ Gi·∫£m gi√°",
        "üéØ T·ªëi ∆∞u CTKM", "üì¶ S·∫£n ph·∫©m c·∫ßn ƒëi·ªÅu ch·ªânh", "üë§ ƒê·ªãnh gi√° c√° nh√¢n h√≥a"
    ])

# Tab 1
with tabs[0]:
    st.header("üìã D·ªØ li·ªáu sau khi ch·ªçn")
    st.dataframe(df_prod)

# Tab 2
with tabs[1]:
    st.header("üìà T√¨m Gi√° B√°n T·ªëi ∆Øu")
    grp = df_prod.groupby('PRICE')['QUANTITY'].sum().reset_index()
    grp['Revenue'] = grp['PRICE'] * grp['QUANTITY']
    opt = grp.loc[grp['Revenue'].idxmax()]
    st.metric("üíµ Gi√° t·ªëi ∆∞u", f"{opt['PRICE']:.2f}")
    st.metric("üí∞ Doanh thu max", f"{opt['Revenue']:,}")
    st.bar_chart(grp.set_index('PRICE')['Revenue'])

# Tab 3
with tabs[2]:
    st.header("üîé Ph√¢n T√≠ch Gi√° ‚Üî Nhu C·∫ßu")
    grp_q = grp[['PRICE','QUANTITY']]
    corr = grp_q['PRICE'].corr(grp_q['QUANTITY'])
    st.write(f"**H·ªá s·ªë t∆∞∆°ng quan:** {corr:.2f}")
    scatter = alt.Chart(grp_q).mark_circle().encode(x='PRICE', y='QUANTITY').interactive()
    st.altair_chart(scatter, use_container_width=True)

# Tab 4
with tabs[3]:
    st.header("üìä T√°c ƒê·ªông Thay ƒê·ªïi Gi√° ‚Üí Doanh Thu")
    X = grp[['PRICE']].values; y = grp['QUANTITY'].values
    model = LinearRegression().fit(X,y)
    pct = [-0.15,-0.1,-0.05,0,0.05,0.1,0.15]
    base = df_prod['PRICE'].mean()
    res = []
    for p in pct:
        new_p = base*(1+p)
        q = model.predict([[new_p]])[0]
        r = new_p*q
        res.append((f"{int(p*100)}%",round(new_p,2),int(q),int(r)))
    df_res = pd.DataFrame(res, columns=['Œî Gi√°','Gi√°','SL','Doanh thu'])
    st.dataframe(df_res)
    st.line_chart(df_res.set_index('Œî Gi√°')['Doanh thu'])

# Tab 5: Competitor
with tabs[4]:
    st.header("ü§ù Ph√¢n t√≠ch c·∫°nh tranh")
    st.write(f"S·∫£n ph·∫©m/Combo: **{combo_label}**")
    # T·ª± t·∫°o ƒë·ªëi th·ªß: 3 ƒë·ªëi th·ªß v·ªõi gi√° ¬±5%, ¬±10%, ¬±15%
    base_price = df_prod['PRICE'].mean()
    competitors = {
        'ƒê·ªëi th·ªß A': base_price*0.95,
        'ƒê·ªëi th·ªß B': base_price*1.05,
        'ƒê·ªëi th·ªß C': base_price*1.15
    }
    # T√≠nh market share gi·∫£ ƒë·ªãnh qua gi√° (ng∆∞·ª£c gi√°)
    data = []
    for name, price in competitors.items():
        q = model.predict([[price]])[0]
        r = price*q
        data.append((name,price,int(q),int(r)))
    df_comp = pd.DataFrame(data, columns=['ƒê·ªëi th·ªß','Gi√°','SL d·ª± ƒëo√°n','Doanh thu'])
    st.dataframe(df_comp)
    chart = alt.Chart(df_comp).mark_bar().encode(
        x='ƒê·ªëi th·ªß', y='Doanh thu')
    st.altair_chart(chart, use_container_width=True)
# Tab 6: Nh·∫°y C·∫£m Gi√° ‚Äì D·ª±a tr√™n DateInfo
with tabs[5]:
    st.header("üí° Nh·∫°y C·∫£m Gi√° ‚Äì D·ª±a tr√™n DateInfo")

    # 1. Chu·∫©n h√≥a bi·∫øn Holiday th√†nh nh·ªã ph√¢n
    df = df_prod.copy()
    df['IS_HOLIDAY'] = df['HOLIDAY'].notna().astype(int)

    # C√°c c·ªôt nh·ªã ph√¢n ƒë√£ c√≥: IS_WEEKEND, IS_SCHOOLBREAK, IS_OUTDOOR
    # Ki·ªÉm tra t·ªìn t·∫°i
    factors = [c for c in ['IS_HOLIDAY', 'IS_WEEKEND', 'IS_SCHOOLBREAK', 'IS_OUTDOOR'] if c in df.columns]
    
    if not factors:
        st.warning("Kh√¥ng t√¨m th·∫•y c·ªôt Holiday/Weekend/Schoolbreak/Outdoor trong d·ªØ li·ªáu.")
        st.stop()

    # 2. T√≠nh ŒîP, ŒîQ, Elasticity
    df = df.sort_values('CALENDAR_DATE')
    df['ŒîP'] = df['PRICE'].pct_change()
    df['ŒîQ'] = df['QUANTITY'].pct_change()
    df = df.dropna(subset=['ŒîP', 'ŒîQ'])
    df['Elasticity'] = df['ŒîQ'] / df['ŒîP']

    # 3. Nh√≥m theo t·ª´ng factor v√† t√≠nh Elasticity trung b√¨nh
    records = []
    for f in factors:
        grp = df.groupby(f)['Elasticity'].mean().reset_index()
        grp.columns = [f, 'Elasticity_TB']
        for _, row in grp.iterrows():
            records.append({
                'Y·∫øu t·ªë': f,
                'Gi√° tr·ªã': int(row[f]),
                'Elasticity trung b√¨nh': round(row['Elasticity_TB'], 2)
            })

    df_el = pd.DataFrame(records)
    st.subheader("Elasticity trung b√¨nh theo y·∫øu t·ªë")
    st.dataframe(df_el)

    # 4. V·∫Ω bi·ªÉu ƒë·ªì cho m·ªói factor
    for f in factors:
        df_plot = df_el[df_el['Y·∫øu t·ªë'] == f]
        chart = (
            alt.Chart(df_plot)
            .mark_bar()
            .encode(
                x=alt.X('Gi√° tr·ªã:O', title=f),
                y=alt.Y('Elasticity trung b√¨nh:Q'),
                tooltip=['Gi√° tr·ªã', 'Elasticity trung b√¨nh']
            )
            .properties(title=f"Elasticity theo {f}")
        )
        st.altair_chart(chart, use_container_width=True)
# Tab 7: D·ª± ƒëo√°n xu h∆∞·ªõng thay ƒë·ªïi gi√° theo m√πa v·ª•
with tabs[6]:
    st.header("üå∏ D·ª± ƒëo√°n xu h∆∞·ªõng thay ƒë·ªïi gi√° theo m√πa v·ª•")
    
    # Ph√¢n lo·∫°i c√°c ng√†y trong nƒÉm theo b·ªën m√πa
    def classify_season(date):
        if date.month in [3, 4, 5]:  # Xu√¢n
            return 'Xu√¢n'
        elif date.month in [6, 7, 8]:  # H·∫°
            return 'H·∫°'
        elif date.month in [9, 10, 11]:  # Thu
            return 'Thu'
        else:  # ƒê√¥ng
            return 'ƒê√¥ng'

    # Th√™m c·ªôt M√πa v√†o dataframe
    df_prod['Season'] = df_prod['CALENDAR_DATE'].apply(classify_season)
    
    # Nh√≥m d·ªØ li·ªáu theo m√πa v√† t√≠nh trung b√¨nh gi√°
    season_avg_price = df_prod.groupby('Season')['PRICE'].mean().reset_index()
    
    # Th√™m c√°c y·∫øu t·ªë kh√°c ƒë·ªÉ hu·∫•n luy·ªán m√¥ h√¨nh
    df_prod['IS_WEEKEND'] = df_prod['CALENDAR_DATE'].dt.weekday >= 5  # Cu·ªëi tu·∫ßn (Th·ª© 7, Ch·ªß nh·∫≠t)
    df_prod['IS_HOLIDAY'] = df_prod['HOLIDAY'].notna().astype(int)  # Ng√†y l·ªÖ
    
    # T·∫°o c·ªôt m√πa v·ª• d∆∞·ªõi d·∫°ng bi·∫øn gi·∫£ (dummy variables) cho d·ªØ li·ªáu hu·∫•n luy·ªán
    df_prod_dummies = pd.get_dummies(df_prod[['Season', 'IS_WEEKEND', 'IS_HOLIDAY']], drop_first=True)
    
    # S·ª≠ d·ª•ng Linear Regression ƒë·ªÉ hu·∫•n luy·ªán m√¥ h√¨nh
    X_season = df_prod_dummies.values
    y_price = df_prod['PRICE'].values
    
    # D·ª± ƒëo√°n gi√° theo m√πa s·ª≠ d·ª•ng Linear Regression
    model = LinearRegression().fit(X_season, y_price)
    
    # Th√™m c√°c c·ªôt c·∫ßn thi·∫øt v√†o season_avg_price ƒë·ªÉ ph√π h·ª£p v·ªõi d·ªØ li·ªáu hu·∫•n luy·ªán
    season_avg_price['IS_WEEKEND'] = 0  # Gi·∫£ s·ª≠ kh√¥ng ph·∫£i cu·ªëi tu·∫ßn
    season_avg_price['IS_HOLIDAY'] = 0  # Gi·∫£ s·ª≠ kh√¥ng ph·∫£i ng√†y l·ªÖ
    
    # Chuy·ªÉn ƒë·ªïi c·ªôt 'Season' th√†nh c√°c bi·∫øn gi·∫£ (dummy variables)
    season_avg_price_dummies = pd.get_dummies(season_avg_price[['Season', 'IS_WEEKEND', 'IS_HOLIDAY']], drop_first=True)
    
    # D·ª± ƒëo√°n gi√° cho t·ª´ng m√πa
    predicted_prices = model.predict(season_avg_price_dummies.values)
    season_avg_price['Predicted_Price'] = predicted_prices

    # Hi·ªÉn th·ªã k·∫øt qu·∫£ d·ª± ƒëo√°n
    st.subheader("D·ª± ƒëo√°n gi√° theo m√πa")
    st.dataframe(season_avg_price)

    # V·∫Ω bi·ªÉu ƒë·ªì so s√°nh gi√° th·ª±c t·∫ø v√† gi√° d·ª± ƒëo√°n theo m√πa
    chart_comparison = alt.Chart(season_avg_price).mark_bar().encode(
        x='Season:O', 
        y='Predicted_Price:Q',
        color='Season:O',
        tooltip=['Season', 'Predicted_Price']
    ).properties(title="So s√°nh gi√° d·ª± ƒëo√°n theo m√πa v·ª•")
    st.altair_chart(chart_comparison, use_container_width=True)
# Tab 8: Ph√¢n t√≠ch t√°c ƒë·ªông gi·∫£m gi√° t·ªõi l∆∞·ª£ng h√†ng b√°n
with tabs[7]:
    st.header("üìä T√°c ƒê·ªông C·ªßa Gi·∫£m Gi√° ƒê·∫øn L∆∞·ª£ng H√†ng B√°n Ra")
    
    # D·ªØ li·ªáu gi√° v√† l∆∞·ª£ng b√°n
    grp_q = df_prod[['PRICE', 'QUANTITY']].dropna()
    
    # T·∫°o m√¥ h√¨nh h·ªìi quy tuy·∫øn t√≠nh ƒë·ªÉ d·ª± ƒëo√°n s·ª± thay ƒë·ªïi c·ªßa s·ªë l∆∞·ª£ng b√°n khi thay ƒë·ªïi gi√°
    X = grp_q[['PRICE']].values  # Gi√°
    y = grp_q['QUANTITY'].values  # L∆∞·ª£ng b√°n
    
    model = LinearRegression()
    model.fit(X, y)
    
    # Hi·ªÉn th·ªã h·ªá s·ªë h·ªìi quy (slope)
    st.write(f"**H·ªá s·ªë h·ªìi quy (slope)**: {model.coef_[0]:.2f}")
    
    # D·ª± ƒëo√°n l∆∞·ª£ng b√°n khi thay ƒë·ªïi gi√° (gi·∫£m gi√° 5%, 10%, 15%)
    percentage_changes = [-0.05, -0.10, -0.15]
    price_changes = [base_price * (1 + p) for p in percentage_changes]
    predicted_sales = model.predict(np.array(price_changes).reshape(-1, 1))
    
    # T·∫°o b·∫£ng d·ªØ li·ªáu k·∫øt qu·∫£ ph√¢n t√≠ch
    results = pd.DataFrame({
        'Gi·∫£m Gi√° (%)': [int(p * 100) for p in percentage_changes],
        'Gi√° Sau Gi·∫£m (%)': [round(base_price * (1 + p), 2) for p in percentage_changes],
        'L∆∞·ª£ng B√°n D·ª± ƒêo√°n': [int(s) for s in predicted_sales]
    })
    
    st.subheader("K·∫øt qu·∫£ t√°c ƒë·ªông gi·∫£m gi√° t·ªõi l∆∞·ª£ng b√°n")
    st.dataframe(results)
    
    # V·∫Ω bi·ªÉu ƒë·ªì t√°c ƒë·ªông gi·∫£m gi√° t·ªõi l∆∞·ª£ng b√°n
    chart = alt.Chart(results).mark_bar().encode(
        x='Gi·∫£m Gi√° (%):O',
        y='L∆∞·ª£ng B√°n D·ª± ƒêo√°n:Q',
        color='Gi·∫£m Gi√° (%):O',
        tooltip=['Gi·∫£m Gi√° (%)', 'L∆∞·ª£ng B√°n D·ª± ƒêo√°n']
    ).properties(title="T√°c ƒê·ªông C·ªßa Gi·∫£m Gi√° ƒê·∫øn L∆∞·ª£ng H√†ng B√°n Ra")
    
    st.altair_chart(chart, use_container_width=True)
# Tab 9: T·ªëi ∆∞u ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i
    with tabs[8]:
        st.header("üéØ T·ªëi ∆∞u h√≥a ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i d·ª±a tr√™n gi√°")
        discount_range = np.arange(0, 55, 5)
        promo_df = pd.DataFrame()
        for d in discount_range:
            adj_price = df['PRICE'].mean() * (1 - d/100)
            adj_quantity = df['QUANTITY'].mean() * (1 + d/100)
            rev = adj_price * adj_quantity
            promo_df = pd.concat([promo_df, pd.DataFrame({
                'Gi·∫£m gi√° (%)': [d],
                'Gi√° sau gi·∫£m': [adj_price],
                'D·ª± ƒëo√°n SL': [adj_quantity],
                'Doanh thu': [rev]
            })])
        chart = alt.Chart(promo_df).mark_line(point=True).encode(
            x=alt.X('Gi·∫£m gi√° (%):Q'),
            y=alt.Y('Doanh thu:Q'),
            tooltip=['Gi·∫£m gi√° (%)', 'Gi√° sau gi·∫£m', 'D·ª± ƒëo√°n SL', 'Doanh thu']
        ).properties(title="üìà Doanh thu d·ª± ƒëo√°n theo m·ª©c gi·∫£m gi√°")
        st.altair_chart(chart, use_container_width=True)

    # Tab 10: S·∫£n ph·∫©m c·∫ßn ƒëi·ªÅu ch·ªânh gi√°
    with tabs[9]:
        st.header("üì¶ S·∫£n ph·∫©m c·∫ßn ƒëi·ªÅu ch·ªânh gi√°")
        grouped = df.groupby('ITEM_NAME').agg({'PRICE': 'mean', 'QUANTITY': 'mean'}).reset_index()
        grouped['ƒê·ªÅ xu·∫•t'] = grouped.apply(
            lambda row: 'Gi·∫£m gi√°' if row['QUANTITY'] < df['QUANTITY'].mean() and row['PRICE'] > df['PRICE'].mean() else
                        'TƒÉng gi√°' if row['QUANTITY'] > df['QUANTITY'].mean() * 1.2 else
                        'Gi·ªØ nguy√™n', axis=1)
        st.dataframe(grouped[['ITEM_NAME', 'PRICE', 'QUANTITY', 'ƒê·ªÅ xu·∫•t']])

    # Tab 11: ƒê·ªãnh gi√° c√° nh√¢n h√≥a
    with tabs[10]:
        st.header("üë§ ƒê·ªãnh gi√° c√° nh√¢n h√≥a cho kh√°ch h√†ng")
        st.markdown("Gi·∫£ s·ª≠ c√≥ 3 nh√≥m kh√°ch h√†ng: Nh·∫°y c·∫£m gi√°, Trung b√¨nh, Cao c·∫•p")
        customer_segments = pd.DataFrame({
            'Nh√≥m': ['Nh·∫°y c·∫£m', 'Trung b√¨nh', 'Cao c·∫•p'],
            '∆Øu ƒë√£i (%)': [20, 10, 0],
        })
        customer_segments['Gi√° ƒë·ªÅ xu·∫•t'] = df['PRICE'].mean() * (1 - customer_segments['∆Øu ƒë√£i (%)'] / 100)
        st.dataframe(customer_segments)

        chart = alt.Chart(customer_segments).mark_bar().encode(
            x=alt.X('Nh√≥m:N'),
            y=alt.Y('Gi√° ƒë·ªÅ xu·∫•t:Q'),
            color='Nh√≥m:N',
            tooltip=['Nh√≥m', '∆Øu ƒë√£i (%)', 'Gi√° ƒë·ªÅ xu·∫•t']
        ).properties(title="üí° Gi√° ƒë·ªÅ xu·∫•t theo nh√≥m kh√°ch h√†ng")
        st.altair_chart(chart, use_container_width=True)